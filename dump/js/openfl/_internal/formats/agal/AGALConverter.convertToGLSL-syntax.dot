digraph graphname {
n47805 [shape=box,label="(47805)"];
n47804 [shape=box,label="(47804)\nmap.addDR(dr, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr1, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr2, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)"];
n47803 [shape=box,label="(47803)\nvar x = dr.toGLSL()\nvar x = x + \" = max(\"\nvar x = sr1.toGLSL()\nvar x = x + x\nvar x = x + \", \"\nvar x = sr2.toGLSL()\nvar x = x + x\nvar x = x + \"); // max\"\nvar sb_b = Std.string(x)\nsb_b = sb_b + sb_b"];
n47802 [shape=box,label="(47802)"];
n47802 -> n47803[style="dashed",color="gray",label="sub"];
n47802 -> n47804[style="dashed",color="gray",label="next"];
n47801 [shape=box,label="(47801)\nmap.addDR(dr, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr1, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr2, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)"];
n47800 [shape=box,label="(47800)\nvar x = dr.toGLSL()\nvar x = x + \" = min(\"\nvar x = sr1.toGLSL()\nvar x = x + x\nvar x = x + \", \"\nvar x = sr2.toGLSL()\nvar x = x + x\nvar x = x + \"); // min\"\nvar sb_b = Std.string(x)\nsb_b = sb_b + sb_b"];
n47799 [shape=box,label="(47799)"];
n47799 -> n47800[style="dashed",color="gray",label="sub"];
n47799 -> n47801[style="dashed",color="gray",label="next"];
n47798 [shape=box,label="(47798)\nmap.addDR(dr, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr1, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)"];
n47797 [shape=box,label="(47797)\nvar x = dr.toGLSL()\nvar x = x + \" = vec4(1) / \"\nvar x = sr1.toGLSL()\nvar x = x + x\nvar x = x + \"; // rcp\"\nvar sb_b = Std.string(x)\nsb_b = sb_b + sb_b"];
n47796 [shape=box,label="(47796)\nvar x = dr.toGLSL()\nvar x = x + \" = 1.0 / \"\nvar x = sr1.toGLSL()\nvar x = x + x\nvar x = x + \"; // rcp\"\nvar sb_b = Std.string(x)\nsb_b = sb_b + sb_b"];
n47795 [shape=box,label="(47795)\nvar sr = sr1.toGLSL()\nvar tmp = sr.indexOf(\".\")\nvar tmp = tmp > -1\n@:cond-branch tmp"];
n47795 -> n47796[style="dashed",color="gray",label="then"];
n47795 -> n47797[style="dashed",color="gray",label="else"];
n47795 -> n47798[style="dashed",color="gray",label="next"];
n47794 [shape=box,label="(47794)\nmap.addDR(dr, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr1, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr2, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)"];
n47793 [shape=box,label="(47793)\nvar x = dr.toGLSL()\nvar x = x + \" = \"\nvar x = sr1.toGLSL()\nvar x = x + x\nvar x = x + \" / \"\nvar x = sr2.toGLSL()\nvar x = x + x\nvar x = x + \"; // div\"\nvar sb_b = Std.string(x)\nsb_b = sb_b + sb_b"];
n47792 [shape=box,label="(47792)"];
n47792 -> n47793[style="dashed",color="gray",label="sub"];
n47792 -> n47794[style="dashed",color="gray",label="next"];
n47791 [shape=box,label="(47791)\nmap.addDR(dr, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr1, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr2, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)"];
n47790 [shape=box,label="(47790)\nvar x = dr.toGLSL()\nvar x = x + \" = \"\nvar x = sr1.toGLSL()\nvar x = x + x\nvar x = x + \" * \"\nvar x = sr2.toGLSL()\nvar x = x + x\nvar x = x + \"; // mul\"\nvar sb_b = Std.string(x)\nsb_b = sb_b + sb_b"];
n47789 [shape=box,label="(47789)"];
n47789 -> n47790[style="dashed",color="gray",label="sub"];
n47789 -> n47791[style="dashed",color="gray",label="next"];
n47788 [shape=box,label="(47788)\nmap.addDR(dr, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr1, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr2, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)"];
n47787 [shape=box,label="(47787)\nvar x = dr.toGLSL()\nvar x = x + \" = \"\nvar x = sr1.toGLSL()\nvar x = x + x\nvar x = x + \" - \"\nvar x = sr2.toGLSL()\nvar x = x + x\nvar x = x + \"; // sub\"\nvar sb_b = Std.string(x)\nsb_b = sb_b + sb_b"];
n47786 [shape=box,label="(47786)"];
n47786 -> n47787[style="dashed",color="gray",label="sub"];
n47786 -> n47788[style="dashed",color="gray",label="next"];
n47785 [shape=box,label="(47785)\nmap.addDR(dr, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr1, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr2, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)"];
n47784 [shape=box,label="(47784)\nvar x = dr.toGLSL()\nvar x = x + \" = \"\nvar x = sr1.toGLSL()\nvar x = x + x\nvar x = x + \" + \"\nvar x = sr2.toGLSL()\nvar x = x + x\nvar x = x + \"; // add\"\nvar sb_b = Std.string(x)\nsb_b = sb_b + sb_b"];
n47783 [shape=box,label="(47783)"];
n47783 -> n47784[style="dashed",color="gray",label="sub"];
n47783 -> n47785[style="dashed",color="gray",label="next"];
n47782 [shape=box,label="(47782)\nmap.addDR(dr, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)\nmap.addSR(sr1, openfl._internal.formats.agal._AGALConverter.RegisterUsage.VECTOR_4)"];
n47781 [shape=box,label="(47781)\nvar x = dr.toGLSL()\nvar x = x + \" = \"\nvar x = sr1.toGLSL()\nvar x = x + x\nvar x = x + \"; // mov\"\nvar sb_b = Std.string(x)\nsb_b = sb_b + sb_b"];
n47780 [shape=box,label="(47780)"];
n47780 -> n47781[style="dashed",color="gray",label="sub"];
n47780 -> n47782[style="dashed",color="gray",label="next"];
n47779 [shape=box,label="(47779)\nvar opcode = cast agal.readInt()\nvar dest = cast cast agal.readUnsignedInt()\nvar source1 = openfl._internal.formats.agal.AGALConverter.readUInt64(agal)\nvar source2 = openfl._internal.formats.agal.AGALConverter.readUInt64(agal)\nvar dr = openfl._internal.formats.agal._AGALConverter.DestRegister.parse(dest, programType)\nvar sr1 = openfl._internal.formats.agal._AGALConverter.SourceRegister.parse(source1, programType, dr.mask)\nvar sr2 = openfl._internal.formats.agal._AGALConverter.SourceRegister.parse(source2, programType, dr.mask)\nsb_b = sb_b + \"\\t\"\nvar opcode = opcode\n@:cond-branch opcode"];
n47778 [shape=box,label="(47778)\nbreak"];
n47777 [shape=box,label="(47777)\nvar a = cast cast agal.position\nvar b = openfl.utils._ByteArray.ByteArray_Impl_.get_length(agal)\nvar tmp = _UInt.UInt_Impl_.gt(b, a)\nvar tmp = ! ((tmp))\n@:cond-branch tmp"];
n47777 -> n47778[style="dashed",color="gray",label="then"];
n47777 -> n47779[style="dashed",color="gray",label="next"];
n47776 [shape=box,label="<loop-head>
(47776)"];
n47775 [shape=box,label="(47775)"];
n47774 [shape=box,label="(47774)\nvar map = new openfl._internal.formats.agal.RegisterMap()\nvar sb_b\nsb_b = \"\""];
n47774 -> n47775[style="dashed",color="gray",label="merge"];
n47773 [shape=box,label="(47773)\nprogramType = openfl._internal.formats.agal._AGALConverter.ProgramType.FRAGMENT"];
n47772 [shape=box,label="(47772)\nprogramType = openfl._internal.formats.agal._AGALConverter.ProgramType.VERTEX"];
n47771 [shape=box,label="(47771)\nvar programType\nvar programType = cast agal.readByte()\nvar programType = programType & 255\nvar programType = programType == 0\n@:cond-branch programType"];
n47771 -> n47772[style="dashed",color="gray",label="then"];
n47771 -> n47773[style="dashed",color="gray",label="else"];
n47771 -> n47774[style="dashed",color="gray",label="next"];
n47770 [shape=box,label="(47770)\nthrow new openfl.errors.IllegalOperationError(\"Shader type ID must be 0xA1\")"];
n47769 [shape=box,label="(47769)\nvar shaderTypeID = cast agal.readByte()\nvar shaderTypeID = shaderTypeID & 255\nvar tmp = shaderTypeID != 161\n@:cond-branch tmp"];
n47769 -> n47770[style="dashed",color="gray",label="then"];
n47769 -> n47771[style="dashed",color="gray",label="next"];
n47768 [shape=box,label="(47768)\nthrow new openfl.errors.IllegalOperationError(\"Version must be 1\")"];
n47767 [shape=box,label="(47767)\nvar version = cast agal.readInt()\nvar tmp = version != 1\n@:cond-branch tmp"];
n47767 -> n47768[style="dashed",color="gray",label="then"];
n47767 -> n47769[style="dashed",color="gray",label="next"];
n47766 [shape=box,label="(47766)\nthrow new openfl.errors.IllegalOperationError(\"Magic value must be 0xA0, may not be AGAL\")"];
n47765 [shape=box,label="(47765)\nvar tmp = magic != 160\n@:cond-branch tmp"];
n47765 -> n47766[style="dashed",color="gray",label="then"];
n47765 -> n47767[style="dashed",color="gray",label="next"];
n47764 [shape=box,label="(47764)\nreturn cast agal.readUTF()"];
n47763 [shape=box,label="<function-end>
(47763)"];
n47762 [shape=box,label="<function-begin>
(47762)\ncast agal.position = 0\nagal.__endian = cast 1\nvar magic = cast agal.readByte()\nvar magic = magic & 255\nvar tmp = magic == 176\n@:cond-branch tmp"];
n47762 -> n47764[style="dashed",color="gray",label="then"];
n47762 -> n47765[style="dashed",color="gray",label="next"];
n1 [shape=box,label="<root>
(1)"];
}
